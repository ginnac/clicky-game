{"ast":null,"code":"import _classCallCheck from\"c:\\\\Users\\\\18016\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"c:\\\\Users\\\\18016\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"c:\\\\Users\\\\18016\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"c:\\\\Users\\\\18016\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";import _inherits from\"c:\\\\Users\\\\18016\\\\clicky-game\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import pokemons from\"../pokemons.json\";import Cards from'./bodyParts/Cards.js';import Navbar from'./bodyParts/Navbar.js';import Jumbotron from'./bodyParts/Jumbotron.js';import Wrapper from\"./Wrapper\";var CardsUpdate=/*#__PURE__*/function(_Component){_inherits(CardsUpdate,_Component);function CardsUpdate(){var _getPrototypeOf2;var _this;_classCallCheck(this,CardsUpdate);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_possibleConstructorReturn(this,(_getPrototypeOf2=_getPrototypeOf(CardsUpdate)).call.apply(_getPrototypeOf2,[this].concat(args)));_this.state={pokemonsList:pokemons,message:\"Click an image to begin!\",score:0,topScore:0,color:\"white\",shadow:\"2px 2px 4px #000000\"};_this.shuffle=function(pokemonsList){var newPokemons=[].concat(pokemonsList);// create new array\nfor(var i=newPokemons.length-1;i>0;i--){var j=Math.floor(Math.random()*(i+1));var _ref=[newPokemons[j],newPokemons[i]];newPokemons[i]=_ref[0];newPokemons[j]=_ref[1];}return _this.setState({pokemonsList:newPokemons});;};_this.cardStatus=function(id){var pokemonsList=_this.state.pokemonsList;//method to map pokemon array; and changed cliked status\nvar pokemonsUpdated=pokemonsList.map(function(pokemon){if(pokemon.clicked&&pokemon.id===id){//testing it detects this conditional \nconsole.log(\"oops you lost!\");//game is over so and update the clicked properties to false\n//and then if the points are the highest update \n_this.setState({score:0,message:\"Opps, wrong guess\",color:\"#5133a4\"});//setting message style color back to white after 1/2 a second\nsetTimeout(function(){_this.setState({color:\"red\"});},300);if(_this.state.topScore<_this.state.score){_this.setState({topScore:_this.state.score});}for(var i=0;i<pokemonsList.length;i++){pokemonsList[i].clicked=false;}console.log(_this.state);}else if(pokemon.id===id){//if the last score was 11 and did a right guess...\nif(_this.state.score===11){for(var _i=0;_i<pokemonsList.length;_i++){pokemonsList[_i].clicked=false;}_this.setState({score:0,topScore:0,message:\"You won, play again!\",color:\"#5133a4\"});//setting message style color back to white after 1/2 a second\nsetTimeout(function(){_this.setState({color:\"orange\"});},300);}else{//chnaging state to true\npokemon.clicked=true;//testing it detects this conditional correctly \nconsole.log(_this.state);console.log(\"1 point more\");//update the navbar to give 1 point, and message to be set...\n_this.setState({score:_this.state.score+1,message:\"Great, you scored!\",color:\"#5133a4\"});//setting message style color back to white after 1/2 a second\nsetTimeout(function(){_this.setState({color:\"yellow\"});},300);}}return pokemon;});_this.setState({pokemonsList:pokemonsUpdated});//randomize\n_this.shuffle(pokemonsList);};return _this;}_createClass(CardsUpdate,[{key:\"componentDidMount\",value:function componentDidMount(){this.shuffle(this.state.pokemonsList);}//shuffle method to shuffle update values:\n},{key:\"render\",//display each poken in pokemons.json array\nvalue:function render(){var _this2=this;return React.createElement(\"div\",null,React.createElement(Navbar,{message:this.state.message,score:this.state.score,topScore:this.state.topScore,color:this.state.color,shadow:this.state.shadow}),React.createElement(Jumbotron,null),React.createElement(Wrapper,null,this.state.pokemonsList.map(function(pokemon){return React.createElement(Cards,{cardStatus:_this2.cardStatus,id:pokemon.id,key:pokemon.id,name:pokemon.name,image:pokemon.image,clicked:pokemon.clicked});})));}}]);return CardsUpdate;}(Component);export default CardsUpdate;","map":{"version":3,"sources":["c:\\Users\\18016\\clicky-game\\src\\components\\CardsUpdate.js"],"names":["React","Component","pokemons","Cards","Navbar","Jumbotron","Wrapper","CardsUpdate","state","pokemonsList","message","score","topScore","color","shadow","shuffle","newPokemons","concat","i","length","j","Math","floor","random","setState","cardStatus","id","pokemonsUpdated","map","pokemon","clicked","console","log","setTimeout","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport pokemons from \"../pokemons.json\";\r\nimport Cards from './bodyParts/Cards.js';\r\nimport Navbar from './bodyParts/Navbar.js';\r\nimport Jumbotron from './bodyParts/Jumbotron.js';\r\nimport Wrapper from \"./Wrapper\"\r\n\r\nclass CardsUpdate extends Component {\r\n    // Setting this.state.friends to the friends json array\r\n    state = {\r\n      pokemonsList: pokemons,\r\n      message: \"Click an image to begin!\",\r\n      score: 0,\r\n      topScore: 0,\r\n      color: \"white\",\r\n      shadow: \"2px 2px 4px #000000\"\r\n    };\r\n\r\n\r\n    componentDidMount(){\r\n        this.shuffle(this.state.pokemonsList);\r\n      }\r\n  \r\n    //shuffle method to shuffle update values:\r\n    shuffle = pokemonsList => {\r\n\r\n\r\n      let newPokemons = [].concat(pokemonsList); // create new array\r\n    \r\n        for (let i = newPokemons.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [newPokemons[i], newPokemons[j]] = [newPokemons[j], newPokemons[i]];\r\n        }\r\n        \r\n        return this.setState({ pokemonsList: newPokemons });;\r\n\r\n    };\r\n    \r\n    \r\n    \r\n    \r\n    cardStatus = id => {\r\n\r\n        const pokemonsList = this.state.pokemonsList;\r\n            //method to map pokemon array; and changed cliked status\r\n        const pokemonsUpdated = pokemonsList.map(pokemon => {\r\n\r\n        \r\n            if(pokemon.clicked && pokemon.id ===id){\r\n                //testing it detects this conditional \r\n                console.log(\"oops you lost!\");\r\n                \r\n                //game is over so and update the clicked properties to false\r\n                //and then if the points are the highest update \r\n                this.setState({ score: 0, message: \"Opps, wrong guess\",color:\"#5133a4\"});\r\n                 //setting message style color back to white after 1/2 a second\r\n                setTimeout(() => {\r\n                    this.setState({color:\"red\",});\r\n                  }, 300);\r\n\r\n\r\n                if(this.state.topScore < this.state.score){\r\n                    this.setState({topScore: this.state.score});\r\n                }\r\n\r\n                for (let i = 0; i<pokemonsList.length; i++){\r\n                    pokemonsList[i].clicked = false;\r\n                }\r\n               console.log(this.state);\r\n\r\n\r\n            } \r\n                \r\n\r\n\r\n            else if (pokemon.id === id) {\r\n\r\n                //if the last score was 11 and did a right guess...\r\n                if (this.state.score === 11){\r\n                    for (let i = 0; i<pokemonsList.length; i++){\r\n                    pokemonsList[i].clicked = false;\r\n                    }\r\n                    this.setState({ score: 0, topScore:0, message: \"You won, play again!\", color:\"#5133a4\"});\r\n                   //setting message style color back to white after 1/2 a second\r\n                    setTimeout(() => {\r\n                        this.setState({color:\"orange\"});\r\n                      }, 300);\r\n\r\n                }\r\n                else{\r\n                //chnaging state to true\r\n                pokemon.clicked = true;  \r\n                //testing it detects this conditional correctly \r\n                console.log(this.state);\r\n                console.log(\"1 point more\"); \r\n \r\n                //update the navbar to give 1 point, and message to be set...\r\n                this.setState({ score: this.state.score + 1, message: \"Great, you scored!\", color:\"#5133a4\" });\r\n                \r\n                 //setting message style color back to white after 1/2 a second\r\n                setTimeout(() => {\r\n                    this.setState({color:\"yellow\"});\r\n                  }, 300);\r\n           \r\n              \r\n                }\r\n         \r\n            }\r\n\r\n            return pokemon;\r\n            \r\n\r\n          });\r\n\r\n\r\n          this.setState({ pokemonsList: pokemonsUpdated });\r\n\r\n          //randomize\r\n          this.shuffle(pokemonsList);\r\n\r\n          \r\n\r\n    };\r\n  \r\n    //display each poken in pokemons.json array\r\n    render() {\r\n      return (\r\n        <div>\r\n        <Navbar\r\n        message={this.state.message}\r\n        score={this.state.score}\r\n        topScore={this.state.topScore}\r\n        color={this.state.color}\r\n        shadow = {this.state.shadow}\r\n        />\r\n        <Jumbotron/> \r\n        <Wrapper>\r\n            \r\n          {this.state.pokemonsList.map(pokemon => (\r\n            <Cards\r\n              cardStatus={this.cardStatus}\r\n              id={pokemon.id}\r\n              key={pokemon.id}\r\n              name={pokemon.name}\r\n              image={pokemon.image}\r\n              clicked={pokemon.clicked}\r\n             />\r\n          ))}\r\n        </Wrapper>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default CardsUpdate;"]},"metadata":{},"sourceType":"module"}