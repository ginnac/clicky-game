{"ast":null,"code":"var _jsxFileName = \"c:\\\\Users\\\\18016\\\\clicky-game\\\\src\\\\components\\\\CardsUpdate.js\";\nimport React, { Component } from \"react\";\nimport pokemons from \"../pokemons.json\";\nimport Cards from './bodyParts/Cards.js'; //import Navbar from './bodyParts/Navbar.js';\n\nimport Wrapper from \"./Wrapper\";\n\nclass CardsUpdate extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      pokemonsList: pokemons\n    };\n\n    this.shuffle = pokemonsList => {\n      // let newPokemons = [].concat(pokemonsList); // create new array\n      // let indexesList = [];\n      // for (let i = pokemonsList.length - 1; i > 0; i--) {\n      //     const j = Math.floor(Math.random() * (i + 1));\n      //     [pokemonsList[i], pokemonsList[j]] = [pokemonsList[j], pokemonsList[i]];\n      // }\n      // return pokemonsList;\n      let counter = pokemonsList.length; // While there are elements in the array\n\n      while (counter > 0) {\n        // Pick a random index\n        let index = Math.floor(Math.random() * counter); // Decrease counter by 1\n\n        counter--; // And swap the last element with it\n\n        let temp = pokemonsList[counter];\n        pokemonsList[counter] = pokemonsList[index];\n        pokemonsList[index] = temp;\n      }\n\n      return pokemonsList;\n    };\n\n    this.cardStatus = id => {\n      const pokemonsList = this.state.pokemonsList; //method to map pokemon array; and changed cliked status\n\n      const pokemonsUpdated = pokemonsList.map(pokemon => {\n        if (pokemon.clicked && pokemon.id === id) {\n          //testing it detects this conditional \n          console.log(\"oops you lost!\"); //randomize\n          // pokemonsList.sort(function(a, b){return 0.5 - Math.random()});\n          //game over and update the navbar to see if the topest winner has been beaten\n        } else if (pokemon.id === id) {\n          //chnaging state to true\n          pokemon.clicked = true; //testing it detects this conditional correctly \n\n          console.log(this.state);\n          console.log(\"1 point more\"); //randomize\n          //pokemonsList.sort(function(a, b){return 0.5 - Math.random()});\n          //update the navbar to give 1 point\n        } //another if condition to see if the person won by doing it correctly on all cards...\n\n\n        this.shuffle(pokemonsList);\n        return pokemon;\n      });\n      this.setState({\n        pokemonsList: pokemonsUpdated\n      });\n    };\n  }\n\n  //display each poken in pokemons.json array\n  render() {\n    return React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, this.state.pokemonsList.map(pokemon => React.createElement(Cards, {\n      cardStatus: this.cardStatus,\n      id: pokemon.id,\n      key: pokemon.id,\n      name: pokemon.name,\n      image: pokemon.image,\n      clicked: pokemon.clicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default CardsUpdate;","map":{"version":3,"sources":["c:\\Users\\18016\\clicky-game\\src\\components\\CardsUpdate.js"],"names":["React","Component","pokemons","Cards","Wrapper","CardsUpdate","state","pokemonsList","shuffle","counter","length","index","Math","floor","random","temp","cardStatus","id","pokemonsUpdated","map","pokemon","clicked","console","log","setState","render","name","image"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAOC,KAAP,MAAkB,sBAAlB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,WAApB;;AAEA,MAAMC,WAAN,SAA0BJ,SAA1B,CAAoC;AAAA;AAAA;AAAA,SAEhCK,KAFgC,GAExB;AACNC,MAAAA,YAAY,EAACL;AADP,KAFwB;;AAAA,SAOhCM,OAPgC,GAOtBD,YAAY,IAAI;AAEvB;AACD;AAEE;AAEA;AAEA;AAEA;AAEA;AAII,UAAIE,OAAO,GAAGF,YAAY,CAACG,MAA3B,CAjBkB,CAmBlB;;AACA,aAAOD,OAAO,GAAG,CAAjB,EAAoB;AAChB;AACA,YAAIE,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,OAA3B,CAAZ,CAFgB,CAIhB;;AACAA,QAAAA,OAAO,GALS,CAOhB;;AACA,YAAIM,IAAI,GAAGR,YAAY,CAACE,OAAD,CAAvB;AACAF,QAAAA,YAAY,CAACE,OAAD,CAAZ,GAAwBF,YAAY,CAACI,KAAD,CAApC;AACAJ,QAAAA,YAAY,CAACI,KAAD,CAAZ,GAAsBI,IAAtB;AACH;;AAED,aAAOR,YAAP;AAEP,KA1C+B;;AAAA,SAgDhCS,UAhDgC,GAgDnBC,EAAE,IAAI;AACf,YAAMV,YAAY,GAAG,KAAKD,KAAL,CAAWC,YAAhC,CADe,CAEf;;AACA,YAAMW,eAAe,GAAGX,YAAY,CAACY,GAAb,CAAiBC,OAAO,IAAI;AAEhD,YAAGA,OAAO,CAACC,OAAR,IAAmBD,OAAO,CAACH,EAAR,KAAcA,EAApC,EAAuC;AACnC;AACAK,UAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAFmC,CAGnC;AAGD;AACC;AAEH,SATD,MAaK,IAAIH,OAAO,CAACH,EAAR,KAAeA,EAAnB,EAAuB;AAC1B;AACAG,UAAAA,OAAO,CAACC,OAAR,GAAkB,IAAlB,CAF0B,CAG1B;;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,KAAKjB,KAAjB;AACAgB,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAL0B,CAO1B;AACA;AACA;AAED,SA1B+C,CA8BhD;;;AACA,aAAKf,OAAL,CAAaD,YAAb;AACA,eAAOa,OAAP;AAGD,OAnCqB,CAAxB;AAuCE,WAAKI,QAAL,CAAc;AAAEjB,QAAAA,YAAY,EAAEW;AAAhB,OAAd;AAEL,KA5F+B;AAAA;;AA8FhC;AACAO,EAAAA,MAAM,GAAG;AACP,WAGE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKnB,KAAL,CAAWC,YAAX,CAAwBY,GAAxB,CAA4BC,OAAO,IAClC,oBAAC,KAAD;AACE,MAAA,UAAU,EAAE,KAAKJ,UADnB;AAEE,MAAA,EAAE,EAAEI,OAAO,CAACH,EAFd;AAGE,MAAA,GAAG,EAAEG,OAAO,CAACH,EAHf;AAIE,MAAA,IAAI,EAAEG,OAAO,CAACM,IAJhB;AAKE,MAAA,KAAK,EAAEN,OAAO,CAACO,KALjB;AAME,MAAA,OAAO,EAAEP,OAAO,CAACC,OANnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CAHF;AAgBD;;AAhH+B;;AAmHlC,eAAehB,WAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport pokemons from \"../pokemons.json\";\r\nimport Cards from './bodyParts/Cards.js';\r\n//import Navbar from './bodyParts/Navbar.js';\r\nimport Wrapper from \"./Wrapper\"\r\n\r\nclass CardsUpdate extends Component {\r\n    // Setting this.state.friends to the friends json array\r\n    state = {\r\n      pokemonsList:pokemons\r\n    };\r\n  \r\n    \r\n    shuffle = pokemonsList => {\r\n      \r\n       // let newPokemons = [].concat(pokemonsList); // create new array\r\n      // let indexesList = [];\r\n    \r\n        // for (let i = pokemonsList.length - 1; i > 0; i--) {\r\n    \r\n        //     const j = Math.floor(Math.random() * (i + 1));\r\n    \r\n        //     [pokemonsList[i], pokemonsList[j]] = [pokemonsList[j], pokemonsList[i]];\r\n        \r\n        // }\r\n    \r\n        // return pokemonsList;\r\n\r\n\r\n\r\n            let counter = pokemonsList.length;\r\n        \r\n            // While there are elements in the array\r\n            while (counter > 0) {\r\n                // Pick a random index\r\n                let index = Math.floor(Math.random() * counter);\r\n        \r\n                // Decrease counter by 1\r\n                counter--;\r\n        \r\n                // And swap the last element with it\r\n                let temp = pokemonsList[counter];\r\n                pokemonsList[counter] = pokemonsList[index];\r\n                pokemonsList[index] = temp;\r\n            }\r\n        \r\n            return pokemonsList;\r\n\r\n    };\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    cardStatus = id => {\r\n        const pokemonsList = this.state.pokemonsList;\r\n        //method to map pokemon array; and changed cliked status\r\n        const pokemonsUpdated = pokemonsList.map(pokemon => {\r\n        \r\n            if(pokemon.clicked && pokemon.id ===id){\r\n                //testing it detects this conditional \r\n                console.log(\"oops you lost!\");\r\n                //randomize\r\n\r\n              \r\n               // pokemonsList.sort(function(a, b){return 0.5 - Math.random()});\r\n                //game over and update the navbar to see if the topest winner has been beaten\r\n               \r\n            } \r\n                \r\n\r\n\r\n            else if (pokemon.id === id) {\r\n              //chnaging state to true\r\n              pokemon.clicked = true;  \r\n              //testing it detects this conditional correctly \r\n              console.log(this.state);\r\n              console.log(\"1 point more\"); \r\n              \r\n              //randomize\r\n              //pokemonsList.sort(function(a, b){return 0.5 - Math.random()});\r\n              //update the navbar to give 1 point\r\n              \r\n            } \r\n\r\n\r\n\r\n            //another if condition to see if the person won by doing it correctly on all cards...\r\n            this.shuffle(pokemonsList);\r\n            return pokemon;\r\n            \r\n\r\n          });\r\n\r\n          \r\n\r\n          this.setState({ pokemonsList: pokemonsUpdated });\r\n\r\n    };\r\n  \r\n    //display each poken in pokemons.json array\r\n    render() {\r\n      return (\r\n\r\n\r\n        <Wrapper>\r\n          {this.state.pokemonsList.map(pokemon => (\r\n            <Cards\r\n              cardStatus={this.cardStatus}\r\n              id={pokemon.id}\r\n              key={pokemon.id}\r\n              name={pokemon.name}\r\n              image={pokemon.image}\r\n              clicked={pokemon.clicked}\r\n             />\r\n          ))}\r\n        </Wrapper>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default CardsUpdate;"]},"metadata":{},"sourceType":"module"}