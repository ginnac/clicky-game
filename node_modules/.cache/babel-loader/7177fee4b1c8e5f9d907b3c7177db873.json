{"ast":null,"code":"var _jsxFileName = \"c:\\\\Users\\\\18016\\\\clicky-game\\\\src\\\\components\\\\CardsUpdate.js\";\nimport React, { Component } from \"react\";\nimport pokemons from \"../pokemons.json\";\nimport Cards from './bodyParts/Cards.js';\nimport Navbar from './bodyParts/Navbar.js';\nimport Jumbotron from './bodyParts/Jumbotron.js';\nimport Wrapper from \"./Wrapper\";\n\nclass CardsUpdate extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      pokemonsList: pokemons,\n      message: \"Click an image to begin!\"\n    };\n\n    this.shuffle = pokemonsList => {\n      let newPokemons = [].concat(pokemonsList); // create new array\n\n      for (let i = newPokemons.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        var _ref = [newPokemons[j], newPokemons[i]];\n        newPokemons[i] = _ref[0];\n        newPokemons[j] = _ref[1];\n      }\n\n      return this.setState({\n        pokemonsList: newPokemons\n      });\n      ;\n    };\n\n    this.cardStatus = id => {\n      const pokemonsList = this.state.pokemonsList; //method to map pokemon array; and changed cliked status\n\n      const pokemonsUpdated = pokemonsList.map(pokemon => {\n        if (pokemon.clicked && pokemon.id === id) {\n          //testing it detects this conditional \n          console.log(\"oops you lost!\"); //game over so and update the clicked properties to false\n          //and then if the points are the highest update \n        } else if (pokemon.id === id) {\n          //chnaging state to true\n          pokemon.clicked = true; //testing it detects this conditional correctly \n\n          console.log(this.state);\n          console.log(\"1 point more\"); //update the navbar to give 1 point\n        } //another if condition to see if the person won by doing it correctly on all cards...\n\n\n        return pokemon;\n      });\n      this.setState({\n        pokemonsList: pokemonsUpdated\n      }); //randomize\n\n      this.shuffle(pokemonsList);\n    };\n  }\n\n  //display each poken in pokemons.json array\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Navbar, {\n      message: this.state.message,\n      score: pokemon.name,\n      topScore: pokemon.image,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(Jumbotron, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }), React.createElement(Wrapper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, this.state.pokemonsList.map(pokemon => React.createElement(Cards, {\n      cardStatus: this.cardStatus,\n      id: pokemon.id,\n      key: pokemon.id,\n      name: pokemon.name,\n      image: pokemon.image,\n      clicked: pokemon.clicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nexport default CardsUpdate;","map":{"version":3,"sources":["c:\\Users\\18016\\clicky-game\\src\\components\\CardsUpdate.js"],"names":["React","Component","pokemons","Cards","Navbar","Jumbotron","Wrapper","CardsUpdate","state","pokemonsList","message","shuffle","newPokemons","concat","i","length","j","Math","floor","random","setState","cardStatus","id","pokemonsUpdated","map","pokemon","clicked","console","log","render","name","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport pokemons from \"../pokemons.json\";\r\nimport Cards from './bodyParts/Cards.js';\r\nimport Navbar from './bodyParts/Navbar.js';\r\nimport Jumbotron from './bodyParts/Jumbotron.js';\r\nimport Wrapper from \"./Wrapper\"\r\n\r\nclass CardsUpdate extends Component {\r\n    // Setting this.state.friends to the friends json array\r\n    state = {\r\n      pokemonsList: pokemons,\r\n      message: \"Click an image to begin!\"\r\n    };\r\n  \r\n    //shuffle method to shuffle update values:\r\n    shuffle = pokemonsList => {\r\n\r\n      let newPokemons = [].concat(pokemonsList); // create new array\r\n    \r\n        for (let i = newPokemons.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [newPokemons[i], newPokemons[j]] = [newPokemons[j], newPokemons[i]];\r\n        }\r\n    \r\n        return this.setState({ pokemonsList: newPokemons });;\r\n\r\n    };\r\n    \r\n    \r\n    \r\n    \r\n    \r\n    cardStatus = id => {\r\n        const pokemonsList = this.state.pokemonsList;\r\n        //method to map pokemon array; and changed cliked status\r\n        const pokemonsUpdated = pokemonsList.map(pokemon => {\r\n        \r\n            if(pokemon.clicked && pokemon.id ===id){\r\n                //testing it detects this conditional \r\n                console.log(\"oops you lost!\");\r\n                \r\n                //game over so and update the clicked properties to false\r\n                //and then if the points are the highest update \r\n               \r\n            } \r\n                \r\n\r\n\r\n            else if (pokemon.id === id) {\r\n              //chnaging state to true\r\n              pokemon.clicked = true;  \r\n              //testing it detects this conditional correctly \r\n              console.log(this.state);\r\n              console.log(\"1 point more\"); \r\n \r\n              //update the navbar to give 1 point\r\n              \r\n            } \r\n\r\n\r\n\r\n            //another if condition to see if the person won by doing it correctly on all cards...\r\n           \r\n            return pokemon;\r\n            \r\n\r\n          });\r\n\r\n\r\n          this.setState({ pokemonsList: pokemonsUpdated });\r\n\r\n          //randomize\r\n          this.shuffle(pokemonsList);\r\n\r\n          \r\n\r\n    };\r\n  \r\n    //display each poken in pokemons.json array\r\n    render() {\r\n      return (\r\n        <div>\r\n        <Navbar\r\n        message={this.state.message}\r\n        score={pokemon.name}\r\n        topScore={pokemon.image}\r\n        />\r\n        <Jumbotron/> \r\n        <Wrapper>\r\n            \r\n          {this.state.pokemonsList.map(pokemon => (\r\n            <Cards\r\n              cardStatus={this.cardStatus}\r\n              id={pokemon.id}\r\n              key={pokemon.id}\r\n              name={pokemon.name}\r\n              image={pokemon.image}\r\n              clicked={pokemon.clicked}\r\n             />\r\n          ))}\r\n        </Wrapper>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default CardsUpdate;"]},"metadata":{},"sourceType":"module"}