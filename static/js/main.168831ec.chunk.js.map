{"version":3,"sources":["components/bodyParts/Cards.js","components/bodyParts/Navbar.js","components/bodyParts/Jumbotron.js","components/Wrapper/index.js","components/CardsUpdate.js","components/bodyParts/Footer.js","App.js","index.js"],"names":["Cards","props","style","divStyle","backgroundImage","image","onClick","cardStatus","id","role","aria-label","className","Navbar","textShadow","shadow","href","color","message","score","topScore","Jumbotron","Wrapper","children","CardsUpdate","state","pokemonsList","pokemons","shuffle","newPokemons","concat","i","length","j","Math","floor","random","setState","pokemonsUpdated","map","pokemon","clicked","console","log","setTimeout","this","key","name","Component","Footer","alt","src","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.168831ec.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../../styles/Cards.css\";\r\n\r\n\r\n\r\n//add props to display the cards dynamically....\r\nfunction Cards(props) {\r\n\r\nconst style={\r\n    \r\n\r\n    divStyle:{backgroundImage: `url(${props.image})`}   \r\n}\r\n\r\n\r\n   \r\n  return (\r\n\r\n\r\n        <div onClick={() => props.cardStatus(props.id)}\r\n        role=\"img\" aria-label=\"click item\" className=\"click-item shake\" \r\n            style={style.divStyle}>\r\n        </div>\r\n        \r\n\r\n\r\n       \r\n  );\r\n}\r\n\r\nexport default Cards;\r\n","import React from \"react\";\r\nimport \"../../styles/Navbar.css\";\r\n\r\nfunction Navbar(props) {\r\n\r\nreturn(<nav className=\"navbar\"><ul><li style={{textShadow: props.shadow}} className=\"title navbar-brand\"><a href=\"/\">Clicky Game</a>\r\n</li><li style={{color: props.color, textShadow: props.shadow}} className=\"navbar-text center\">{props.message}</li><li style={{textShadow: props.shadow}} className=\"navbar-text score\">Score: {props.score} | Top Score: {props.topScore}</li></ul></nav>);\r\n\r\n}\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"../../styles/Jumbotron.css\";\r\n\r\nfunction Jumbotron() {\r\nreturn(  \r\n<div className=\"box jumbotron jumbotron-fluid\">\r\n  <div className=\"container\">\r\n    <h1 style={{textShadow: \"2px 2px 4px lightgray\"}} className=\"jumbotron-title display-4\">Clicky Game!</h1>\r\n    <p className=\"lead\">Click on an image to earn points, but don't click on any more than once!</p>\r\n  </div>\r\n</div>);\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return<div className=\"container wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\r\nimport pokemons from \"../pokemons.json\";\r\nimport Cards from './bodyParts/Cards.js';\r\nimport Navbar from './bodyParts/Navbar.js';\r\nimport Jumbotron from './bodyParts/Jumbotron.js';\r\nimport Wrapper from \"./Wrapper\"\r\n\r\nclass CardsUpdate extends Component {\r\n    // Setting this.state.friends to the friends json array\r\n    state = {\r\n      pokemonsList: pokemons,\r\n      message: \"Click an image to begin!\",\r\n      score: 0,\r\n      topScore: 0,\r\n      color: \"white\",\r\n      shadow: \"2px 2px 4px #000000\"\r\n    };\r\n\r\n\r\n    componentDidMount(){\r\n        this.shuffle(this.state.pokemonsList);\r\n      }\r\n  \r\n    //shuffle method to shuffle update values:\r\n    shuffle = pokemonsList => {\r\n\r\n\r\n      let newPokemons = [].concat(pokemonsList); // create new array\r\n    \r\n        for (let i = newPokemons.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [newPokemons[i], newPokemons[j]] = [newPokemons[j], newPokemons[i]];\r\n        }\r\n        \r\n        return this.setState({ pokemonsList: newPokemons });;\r\n\r\n    };\r\n    \r\n    \r\n    \r\n    \r\n    cardStatus = id => {\r\n\r\n        const pokemonsList = this.state.pokemonsList;\r\n            //method to map pokemon array; and changed cliked status\r\n        const pokemonsUpdated = pokemonsList.map(pokemon => {\r\n\r\n        \r\n            if(pokemon.clicked && pokemon.id ===id){\r\n                //testing it detects this conditional \r\n                console.log(\"oops you lost!\");\r\n                \r\n                //game is over so and update the clicked properties to false\r\n                //and then if the points are the highest update \r\n                this.setState({ score: 0, message: \"Opps, wrong guess\",color:\"#5133a4\"});\r\n                 //setting message style color back to white after 1/2 a second\r\n                setTimeout(() => {\r\n                    this.setState({color:\"red\",});\r\n                  }, 300);\r\n\r\n\r\n                if(this.state.topScore < this.state.score){\r\n                    this.setState({topScore: this.state.score});\r\n                }\r\n\r\n                for (let i = 0; i<pokemonsList.length; i++){\r\n                    pokemonsList[i].clicked = false;\r\n                }\r\n               console.log(this.state);\r\n\r\n\r\n            } \r\n                \r\n\r\n\r\n            else if (pokemon.id === id) {\r\n\r\n                //if the last score was 11 and did a right guess...\r\n                if (this.state.score === 11){\r\n                    for (let i = 0; i<pokemonsList.length; i++){\r\n                    pokemonsList[i].clicked = false;\r\n                    }\r\n                    this.setState({ score: 0, topScore:0, message: \"You won, play again!\", color:\"#5133a4\"});\r\n                   //setting message style color back to white after 1/2 a second\r\n                    setTimeout(() => {\r\n                        this.setState({color:\"orange\"});\r\n                      }, 300);\r\n\r\n                }\r\n                else{\r\n                //chnaging state to true\r\n                pokemon.clicked = true;  \r\n                //testing it detects this conditional correctly \r\n                console.log(this.state);\r\n                console.log(\"1 point more\"); \r\n \r\n                //update the navbar to give 1 point, and message to be set...\r\n                this.setState({ score: this.state.score + 1, message: \"Great, you scored!\", color:\"#5133a4\" });\r\n                \r\n                 //setting message style color back to white after 1/2 a second\r\n                setTimeout(() => {\r\n                    this.setState({color:\"yellow\"});\r\n                  }, 300);\r\n           \r\n              \r\n                }\r\n         \r\n            }\r\n\r\n            return pokemon;\r\n            \r\n\r\n          });\r\n\r\n\r\n          this.setState({ pokemonsList: pokemonsUpdated });\r\n\r\n          //randomize\r\n          this.shuffle(pokemonsList);\r\n\r\n          \r\n\r\n    };\r\n  \r\n    //display each poken in pokemons.json array\r\n    render() {\r\n      return (\r\n        <div>\r\n        <Navbar\r\n        message={this.state.message}\r\n        score={this.state.score}\r\n        topScore={this.state.topScore}\r\n        color={this.state.color}\r\n        shadow = {this.state.shadow}\r\n        />\r\n        <Jumbotron/> \r\n        <Wrapper>\r\n            \r\n          {this.state.pokemonsList.map(pokemon => (\r\n            <Cards\r\n              cardStatus={this.cardStatus}\r\n              id={pokemon.id}\r\n              key={pokemon.id}\r\n              name={pokemon.name}\r\n              image={pokemon.image}\r\n              clicked={pokemon.clicked}\r\n             />\r\n          ))}\r\n        </Wrapper>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default CardsUpdate;","import React from \"react\";\r\nimport \"../../styles/Footer.css\";\r\n\r\nfunction Footer() {\r\nreturn(    \r\n<footer className=\"footer\">\r\n    <div className=\"bottom\">Clicky Game! \r\n      <img alt=\"react\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/React-icon.svg/800px-React-icon.svg.png\"/>\r\n    </div>\r\n</footer>)\r\n}\r\n\r\nexport default Footer;","import React from 'react';\n//import './App.css';\nimport CardsUpdate from './components/CardsUpdate';\nimport Footer  from './components/bodyParts/Footer.js';\n\nfunction App() {\n  return (\n    <div >\n     <CardsUpdate/>\n     <Footer/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}